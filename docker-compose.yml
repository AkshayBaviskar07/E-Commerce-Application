version: '3.8'

services:
  config-server:
    build:
      context: ./services/config-server
      dockerfile: Dockerfile
    container_name: config-server
    ports:
      - "8888:8888"
    networks:
      - microservices_net
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8888/actuator/health" ]
      interval: 10s
      timeout: 10s
      retries: 3

  discovery-service:
    build:
      context: ./services/discovery
      dockerfile: Dockerfile
    container_name: discovery-service
    ports:
      - "8761:8761"
    networks:
      - microservices_net
    depends_on:
      config-server:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
      interval: 10s
      timeout: 10s
      retries: 3

  gateway-service:
    build:
      context: ./services/gateway
      dockerfile: Dockerfile
    container_name: gateway-service
    ports:
      - "9000:9000"
    networks:
      - microservices_net
    depends_on:
      config-server:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/actuator/health" ]
      interval: 10s
      timeout: 10s
      retries: 3

  customer-service:
    build:
      context: ./services/customer
      dockerfile: Dockerfile
    container_name: customer-service
    ports:
      - "8082:8082"
    networks:
      - microservices_net
    depends_on:
      config-server:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      mysql:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8082/actuator/health" ]
      interval: 10s
      timeout: 10s
      retries: 3

  order-service:
    build:
      context: ./services/order
      dockerfile: Dockerfile
    container_name: order-service
    ports:
      - "8084:8084"
    networks:
      - microservices_net
    depends_on:
      config-server:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      mysql:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8084/actuator/health" ]
      interval: 10s
      timeout: 10s
      retries: 3

  payment-service:
    build:
      context: ./services/payment
      dockerfile: Dockerfile
    container_name: payment-service
    ports:
      - "8085:8085"
    networks:
      - microservices_net
    depends_on:
      config-server:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      mysql:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8085/actuator/health" ]
      interval: 10s
      timeout: 10s
      retries: 3

  notification-service:
    build:
      context: ./services/notification
      dockerfile: Dockerfile
    container_name: notification-service
    ports:
      - "8086:8086"
    networks:
      - microservices_net
    depends_on:
      config-server:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8086/actuator/health" ]
      interval: 10s
      timeout: 10s
      retries: 3

  product-service:
    build:
      context: ./services/product
      dockerfile: Dockerfile
    container_name: product-service
    ports:
      - "8083:8083"
    networks:
      - microservices_net
    depends_on:
      config-server:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      mysql:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8083/actuator/health" ]
      interval: 10s
      timeout: 10s
      retries: 3

  mysql:
    image: mysql:latest
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: akshay
    ports:
      - "3306:3306"
    networks:
      - microservices_net
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 10s
      retries: 3

  mongodb:
    image: mongo:latest
    container_name: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: akshay
      MONGO_INITDB_ROOT_PASSWORD: akshay
    ports:
      - "27017:27017"
    networks:
      - microservices_net
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 10s
      retries: 3

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    networks:
      - microservices_net

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: ms_kafka
    ports:
      - 9092:9092
    depends_on:
      - zookeeper
    environment:
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
    networks:
      - microservices_net

  mail-dev:
    container_name: ms_mail_dev
    image: maildev/maildev
    ports:
      - 1080:1080
      - 1025:1025
    networks:
      - microservices_net

  zipkin:
    container_name: zipkin
    image: openzipkin/zipkin
    ports:
      - 9411:9411
    networks:
      - microservices_net

networks:
  microservices_net:
    driver: bridge

volumes:
  mysql_data:
  mongo_data:


